A = [1 2 3 1; 4 5 6 1; 7 8 9 1]
B = [1 1; 1 1]
@doc conv2
# conv2(u,v,A)
#
# 2-D convolution of the matrix A with the 2-D separable kernel generated by the vectors u and v. Uses 2-D FFT algorithm
#
# conv2(B,A)
#
# 2-D convolution of the matrix B with the matrix A. Uses 2-D FFT algorithm

conv2(B, A)
# 4x5 Array{Int64,2}:
#   1   3   5   4  1
#   5  12  16  11  2
#  11  24  28  17  2
#   7  15  17  10  1

* = conv2
# WARNING: imported binding for * overwritten in module Main
# conv2 (generic function with 4 methods)

B * A
# 4x5 Array{Int64,2}:
#   1   3   5   4  1
#   5  12  16  11  2
#  11  24  28  17  2
#   7  15  17  10  1

⊗ = conv2
# conv2 (generic function with 4 methods)

B ⊗ A
# 4x5 Array{Int64,2}:
#   1   3   5   4  1
#   5  12  16  11  2
#  11  24  28  17  2
#   7  15  17  10  1

function valid_conv2(A, B)
  return conv2(B, A)[size(B)[1]:size(B)[1]+size(A)[1]-2, size(B)[2]:size(B)[2]+size(A)[2]-2]
end
# valid_conv2 (generic function with 1 method)

valid_conv2(A, B)
# 2x3 Array{Int64,2}:
#  12  16  11
#  24  28  17
